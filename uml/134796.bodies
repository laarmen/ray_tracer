class Object
!!!161047.cpp!!!	render_direct(in ray : Ray, inout scene : Scene, in light_source : LightSource) : color
    rt::color basic = compose(light_source.get_color(), color);
    Impact imp = get_impact(ray);
    Ray to_light(imp.point, light_source.get_origin());
    double scalar = -(ray.get_direction() | imp.normale);
    if (((light_source.get_origin()-imp.point) | imp.normale) <= 0) {
        return rt::color::BLACK;
    }
    std::list<Object *> others;
    Object* interceptor = scene.get_interceptor(to_light, &others);
    // In case there has been mixups due to rounding errors and the object catches
    // its own ray back to the light when it shouldn't (which is NOT always the case)
    // detect it
    if (interceptor) {
        if (interceptor != this && interceptor->intersects(ray) < (imp.point - light_source.get_origin()).norm())
            return rt::color::BLACK;
        if (intersects(to_light) >= OWNRAY_EPSILON)
            return rt::color::BLACK;
        if (others.size() > 1)
            return rt::color::BLACK;
    }
    return rt::color(
            static_cast<unsigned char>(scalar*basic.get_red()),
            static_cast<unsigned char>(scalar*basic.get_green()),
            static_cast<unsigned char>(scalar*basic.get_blue())
        );
!!!161175.cpp!!!	render_indirect(in ray : Ray, inout scene : Scene) : color
    Impact imp = get_impact(ray);
    if (material) {
        return material->indirect_rendering(ray, scene, imp, *this);
    }
    return rt::color::BLACK;
